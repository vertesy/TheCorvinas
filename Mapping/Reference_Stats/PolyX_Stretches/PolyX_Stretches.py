#!/usr/bin/python
### This script counts bases in a reference file

print "PolyX_Stretches.py started, eyy!"
import glob
import sys, os

# Default parameters
inputdir = "/Users/abelvertesy/Github_repos/TheCorvinas/Mapping/Reference_Stats/PolyX_Stretches/"
inputfile = "head.fa"
outputfile = "PolyX_Stretches.tsv"

input_file_fullpath = inputdir+inputfile
print input_file_fullpath

import re

text = "aagatcgatgtggtgctccggagttctcttcgggccagggcctaagccgcgccaggcgagggacggacattcatggcgaatggcggctgctcttctcgttctgccagcgggcccctcgtctctccaccccatccgtctgccggtggtgtgtggaaggcaggggtgcggCTCTCCGGCCCGAGCGCTGCCCCGCGCGCACTTTTCTCAGTGGTTCGCGTGGTCCTTGTGGATGTGTGAGGCGCCCGGTTGTGCCCTCACGTGTTTCACTTTGGTCGTGTCTCGCTTGACCATGTCCCCAGAGTCGGTGGATGTGGCCGGTGGCGTTGCATACCCTTCCCGTCTGGTGTGTGCACGCGCTGTTTCTTGTAAGCGTCGAGGTGCTCCTGGAGCGTTCCAGGTTTGTCTCCTAGGTGCCTGCTTCTGAGCTGGTGGTGGCGCTTCCCATTCCCTGGTGTGCCTCCGGTGCTCCGTCTGGCTGTGTGCCTTCCCGTTTGTGTCTGAGAAGCCCGTGAGAGGGGGGTCGAGGAGAGAAGGAGGGGCAAGACCCCCCTTCTTCGTCGGGTGAGCGCCCACCCCGCGCACTAGTACGCCTGTGCGCCTGTGCGTAGGGCTGGTGCTGAGCGGTCGCGGCTGGCCTTGGAAAGTTTCTCGAGAGACTCATTGCTTTCCCGTGGGGAGCTTTGAGAGGCCTGGCTTTCGGGGGGGACCGGTTGCAGGGTCTCCCCTGTCCGCGGATGCTCAGAATGCCCTTGGAAGAGAACCTTCCTGTTGCCGCAGACCCCCCGCGCGGTCGCCCGCGTGTTGGTCTTCTGGTTTCCCTGTGTGCTCCTCGCATGCATCCTCTCTTGGTGGCCGGGGCTCGTCGGGGTTTTGGGTCCGTCCCGCCCTCAGTGAGAAAGTTTCCTTCTCTAGCTATCTTCCGGAAAGGGTGCGGGCTTCTTACGGTCTTGAGGGGTCTCTCCCGAATGGTCCCCTCGAGGGCTCGCCCCCTGACCGCCTCCCGTGCGCGCAGCGTTTGCTCTCTCGTCTACCACGGCCAGCGCCTCCCCGCTCCGAGTTCGGGGAGGGATCACGCGGGGCAGAGCCTGTCTGTCGTCCTGCCGTTGCTGCGGAGCCATGTGGCTCCGGTTGTGTGGTGGTGGCTGGGGAGAGGGCTCCGTGCACACCCCCGCGTGCGCGGTACTTTCCTCCCCTCCTGAGGGCCGCCGTGCGGGACGGGGTGTGGGTAGGCAACGGTGGGCTCCCGGGTCCCCACCCGTCTTCCCGTGCCTCACCCGTGCCTTCCGTCGCGTGCGTCCCTCTCGCTCGCGTCCACGACTTTGGCCGCTCCCGCGACGCGGGCCTGCGCCGCGCGTGGTGGGTGCTGTGTGCTTCTCGGGCTGTGTGGTTGTGTCGCCTCGCCCCCCCTTCCCGCGGCAGCGTTCCCACGGCTGGCGAAGTCGCGGGAGTCCTCCTTCCCCTCTTCGGGGTCGAGAGGGTCCGTGTCTGGCGTTGATTGATCTCGCTCTCGGGGACGGGACCGTTCTGTGGGAGAACGGCTGTTGGCCGCGTCCGGCGCGACGTCGGACGTGGGGACCCACTGCCGCTCGGGGGTCTTCGTCGGTAGGCATCGGTGTGTCGGCATCGGTCTCTCTCTCGTGTCGGTGTCGCCTCCTCGGGCTCCCGGGGGGCCGTCGTGTTTCGGGTCGCCTCGGCGCTGCAGGTGTGGTGGGACTGCTCAGGGGAGTGGTGCAGTGTGATTCCCGCCGGTTTTGCCTCGCGTGCCCTGACCGGTCCGACGCCCGAGCGGTCTCTCGGTCCCTTGTGAGGACCCCCTTCCGGGAGGGGCCCGTTTCGGCCGCCCTTGCCGTCGTCGCCGGCCCTCGTTCTGCTGTGTCGTTCCCTCCTCCCCGCTCGCCGCAGCCGGTCTTTTTTTCCTCTCTCTCCCCCTCTCCTCTGACTGACCCGTGGCCGTGCTGTCGGACCCCCGCATGGGGGGCGGCCGGGCACGTACGCGTCCGGGCGGTCACCGGGGTCTTGGGGGGGCCGAGGGGTAGAAAGTCGGCTCGGCGGGTGGGAGGAGCTGTGGTTTGGAGGGCGTCCCGGCCCCGCGGCCGTGGCGGTGTCTTGCGCGGTCTTGGAGAGGGCTGCGTGCGAGGGGAAAAGGTTGCCCCGCGAGGGCAAAGGGAAAGAGGCTAGCAGTGGTCATTGTCCCGACGGTGTGGTGGTCTGTTGGCCGAGGTGAGTCTTGGGGGCTCGTCCGGCCCTGTCGTCCTTCGGGAAGGCGCGTGTTGGGGCCTGCCGGAGTGCCGAGGTGGGTACCCTGGCGGTGGGATTAACCCCGCGCGCGTGTCCCGGTGTGGCGGTGGGGGCTCCGGTCGATGTCTACCTCCCTCTCCCCGAGGTCTCAGGCCTTCTCCGCGCGGGCTCTCGGCCCTCCCCTCGTTCCTCCCTCTCGCGGGGTTCAAGTCGCTCGTCGACCTCCCCTCCTCCGTCCTTCCATCTCTCGCGCAATGGCGCCGCCCGAGTTCACGGTGGGTTCGTCCTCCGCCTCCGCTTCTCGCCGGGGGCTGGCCGCTGTCCGGTCTCTCCTGCCCGACCCCCGCTGGCGTGGTCTTCTCTCGCCGGCTTCGCGGACTCCTGGCTTCGCCCGGAGGGTCAGGGGGCTTCCCGGTTCCCCGACGTTGCGCCTCGCTGCTGTGTGCTTGGGGGGGGGGGCCGCTGCGGCCTCCGCCCGCCCGTGAGCCCCTGCCGCACCCGCCGGTGTGCGGTTTAGCGCCGCGGTCAGTTGGGCCCTGGCGTTGTGTCGCGTCGGGAGCGTGTCCGCCTCGCGGCGGCTAGACGCGGGTGTCGCCGGGCTCCGACGGGTGGCCTATCCAGGGCTCGCCCCCGCCGTCCCCCGCCTGCCCGTCCCGGTGGTGGTCGTTGGTGTGGGGAGTGAATGGTGCTACCGGTCATTCCCTCCCGCGTGGTTTGACTGTCTCGCCGGTGTCGCGCTTCTCTTTCCGCCAACCCCCACGCCAACCCACCGCCCTGTGCTCCGCGCCCGGTGCGGTCGACGTTCCGGCTCTCCCGATGCCGAGGGGTTCGGGATTTGTGCCGGGGACGGAGGGGAGAGCGGATAAGAGAGGTGTCGGAGAGCTGTCCCGGGGCAACGCTCGGGTTGGCTTTGCCGCGTGCGTGTGCTCGCGGACGGGTTTTGTCGGACCCCGACAGGGTCGGTCTGGCCGCATGCACTCTCCCGTTCCGCGCGAGCGCCCGCCCGGCTCACCCCCGGTTTGTCCTCCCGCGAGGCTCTCCGCCGCCGCCTCCTCCTCTCTCGCGCTCTCTGTCCCGCCTGGTCCTGTCCCACCCCCGACGGCTTCGCTCGCGCTCCCTtacctggttgatcctgccagtagcatatgcttgtctcaaagattaagccatgcatgtctaagtacgcacggccggtacagtgaaactgcgaatggctcattaaatcagttatggttcctttggtcgctcgctcctctcctacttggataactgtggtaattctagagctaatacatgcccacgggcgctgaccccccttcccggggggggggggggatgcgtgcatttatcagatcaaaaccaacccggtgagctccctcccggctccggccgggggtcgggcgccggcggctttggtgactctagataacctcgggccgatcgcacgcccccgtggcggcgacgacccattcgaacgtctgccctatcaactttcgatggtagtcgccgtgcctaccatggtgaccacgggtgacggggaatcagggttcgattccggagagggagcctgagaaacggctaccacatccaaggaaggcagcaggcgcgcaaattacccactcccgacccggggaggtagtgacgaaaaataacaatacaggactctttcgaggccctgtaattggaatgagtccactttaaatcctttaacgaggatccattggagggcaagtctggtgccagcagccgcggtaattccagctccaatagcgtatattaaagttgctgcagttaaaaagctcgtagttggatcttgggagcgggcgggcggtccgccgcgaggcgagtcaccgcccgtccccgccccttgcctctcggcgccccctcgatgctcttagctgagtgtcccgcggggcccgaagcgtttactttgaaaaaattagagtgttcaaagcaggcccgagccgcctggataccgcagctaggaataatggaataggaccgcggttctattttgttggttttcggaactgaggccatgattaagagggacggccgggggcattcgtattgcgccgctagaggtgaaattcttggaccggcgcaagacggaccagagcgaaagcatttgccaagaatgttttcattaatcaagaacgaaagtcggagtttcgaagacgatcagataccgttgtagttccaaccataaacgatgccgactggcaatgcggcggcgttattcccatgacccgccgggcagcttccgggaaaccaaagtctttgggttccggggggagtatggttgcaaagctgaaacttaaaggaattgacggaagggcaccaccaggagtggagcctgcggcttaatttgactcaacacgggaaacctcacccggcccggacacggacaggattgacagattgatagctctttctcgattccgtgggtggtggtgcatggccgttcttagttggtggagcgatttgtctggttaattccgataacgaacgagactctggcatgctaactagttacgcgacccccgagcggtcggcgtcccccaacttcttagagggacaagtggcgttcagccacccgagattgagcaataacaggtctgtgatgcccttagatgtccggggctgcacgcgcgctacactgactggctcagcgtgtgcctaccctacgccggcaggcgcgggtaacccgttgaaccccattcgtgatggggatcggggattgcaattattccccatgaacgaggaattcccagtaagtgcgggccataagcttgcgttgattaagtccctgccctttgtacacaccgcccgtcgctactaccgattggatggtttagtgaggcccacggccctggtggagcgctgagaagacggtcgaacttgactatctagaggaagtaaaagtcgtaacaaggtttccgtaggtgaacctgcggaaggatcattaACGGGAGACTGTGGAGGAGCGGCGGCGTGGCTCGCTCTCCCCGTCTTGTGTGTGTCCTCGCCGGGAGGCGCGTGCGTCCCGGGTCCCGTCGCCCGCGTGTGGAGCGAGGTGTCTGGAGTGAGGTGAGAGAAGGGGTGGGTGGGGTCGGTCTGGGTCCGTCTGGGACCGCCTCCGATTTCCCCTCCCCCTCCCCTCTCCCTCGTCCGGCTCTGACCTCGCCACCCTACCGCGGCGGCGGCTGCTCGCGGGCGTCGTGCCTCTTTCCCGTCCGGCTCTTCCGTGTCTACGAGGGGCGGTACGTCGTTACGGGTTTTTGACCCGTCCCGGGGGCGTTCGGTCGTCGGGGCGCGCGCTTTGCTCTCCCGGCACCCATCCCCGCCGCGGCTCTGGCTTTTCTACGTTGGCTGGGGCGGTTGTCGCGTGTGGGGGGATGTGAGTGTCGCGTGTGGGTTCGCCCGTCCCGATGCCACGCTTTTCTGGCCTCGCGTGTCCTCCCCGCTCCTGTCCCGGGTACCTAGCTGTCGCGTTCCGGCGCGGAGGTTTAAAGACCCCGGGGGGGTCGCCCTGCCGCCCCCAGGGTCGGGGGGCGGTGGGGCCCGTAGGGAAGTCGGTCGTTCGGGCGGCTCTC"
stringlist=re.findall(r'([A]{5,})', text.upper())
maxlength = max(len(s) for s in stringlist)
print maxlength

# Function and object definitions -------------------------------------------------------
def LongestStretch(String, Letter, MinLength=5):
	pattern = "["+Letter+"]{"+str(MinLength)+",}"
	stringlist=re.findall(r'('+pattern+')', String)
	print stringlist
	if len(stringlist):
		maxlength = max(len(s) for s in stringlist)
	else:
		maxlength=0

	return maxlength

print "---"

print LongestStretch(text,"A",)

# # Go -------------------------------------------------------
# FrequencyTable = open(inputdir + outputfile, 'w+')
# print >> FrequencyTable, "Name\tA\tC\tG\tT\tN"

# with open(input_file_fullpath) as f:
# 	for line in f:
# 		if line[0] == '>':
# 			TrName = line[1:].rstrip()
# 		else:
# 			TranscriptLength=  line.__len__()
# 			Az = LetterFreq(line, "A")
# 			Cz = LetterFreq(line, "C")
# 			Gz = LetterFreq(line, "G")
# 			Tz = LetterFreq(line, "T")
# 			Nz = LetterFreq(line, "N")
# 			AllFreq= TrName+"\t" + Az+"\t"+Cz+"\t"+Gz+"\t"+Tz+"\t"+Nz
# 			print >> FrequencyTable, AllFreq

# # Go -------------------------------------------------------

# print "Finsihed"

